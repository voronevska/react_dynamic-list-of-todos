{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/Statuses.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","selectedTodo","onSelectedTodo","id","title","completed","isSelected","className","cn","type","onClick","TodoList","todos","map","TodoFilter","status","query","onStatusChange","onQueryChange","handleSearchChange","useCallback","e","target","value","onChange","placeholder","event","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Statuses","TodoModal","onClose","userId","useState","user","setUser","useEffect","getUser","fetchUser","href","email","name","App","setTodos","setSelectedTodo","areTodosLoaded","setAreTodosLoaded","All","setStatus","setQuery","visibleTodos","useMemo","filter","toLowerCase","includes","Active","Completed","fetchTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.965d6da0.chunk.js","sourcesContent":["import { FC } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  selectedTodo: Todo | null;\n  onSelectedTodo: (todo: Todo) => void;\n}\n\nexport const TodoItem: FC<Props> = ({\n  todo,\n  selectedTodo,\n  onSelectedTodo,\n}) => {\n  const { id, title, completed } = todo;\n  const isSelected = id === selectedTodo?.id;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({ 'has-background-info-light': isSelected })}\n      key={id}\n    >\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelectedTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': !isSelected,\n              'fa-eye-slash': isSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onSelectedTodo: (todo: Todo) => void;\n}\n\nexport const TodoList: FC<Props> = ({\n  todos,\n  selectedTodo,\n  onSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => (\n        <TodoItem\n          todo={todo}\n          selectedTodo={selectedTodo}\n          onSelectedTodo={onSelectedTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { FC, useCallback } from 'react';\nimport { Statuses } from '../../types/Statuses';\n\ninterface Props {\n  status: Statuses;\n  query: string;\n  onStatusChange: (status: Statuses) => void;\n  onQueryChange: (query: string) => void;\n}\n\nexport const TodoFilter: FC<Props> = ({\n  status,\n  query,\n  onStatusChange,\n  onQueryChange,\n}) => {\n  const handleSearchChange = useCallback(\n    (e: React.ChangeEvent<HTMLSelectElement>) => {\n      onStatusChange(e.target.value as Statuses);\n    },\n    [],\n  );\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSearchChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Statuses {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { FC, useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  todo: Todo;\n  onClose: () => void;\n}\n\nexport const TodoModal: FC<Props> = ({ todo, onClose }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then((fetchUser: User) => {\n        setUser(fetchUser);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport {\n  FC,\n  useState,\n  useEffect,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Statuses } from './types/Statuses';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [areTodosLoaded, setAreTodosLoaded] = useState<boolean>(false);\n  const [status, setStatus] = useState(Statuses.All);\n  const [query, setQuery] = useState<string>('');\n\n  const visibleTodos = useMemo(() => {\n    const filteredTodos = todos.filter(({ title }) => (\n      title\n        .toLowerCase()\n        .includes(query.toLowerCase())\n    ));\n\n    return filteredTodos.filter(({ completed }) => {\n      switch (status) {\n        case Statuses.Active:\n          return !completed;\n\n        case Statuses.Completed:\n          return completed;\n\n        default:\n          return true;\n      }\n    });\n  }, [todos, status, query]);\n\n  const handleModalClose = () => {\n    setSelectedTodo(null);\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then((fetchTodos: Todo[]) => {\n        setTodos(fetchTodos);\n        setAreTodosLoaded(true);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                status={status}\n                query={query}\n                onStatusChange={setStatus}\n                onQueryChange={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!areTodosLoaded && <Loader />}\n\n              {areTodosLoaded && (\n                visibleTodos.length\n                  ? (\n                    <TodoList\n                      todos={visibleTodos}\n                      selectedTodo={selectedTodo}\n                      onSelectedTodo={setSelectedTodo}\n                    />\n                  )\n                  : (\n                    <p>\n                      No data with this words...\n                    </p>\n                  )\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={handleModalClose}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}